//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using System.Collections;
using System.Linq;

public class SingletonInGame<T> : MonoBehaviour where T : MonoBehaviour
{
    private static T instance;
    private static object _lock = new object();
    private static bool applicationIsQuitting = false;

    public static T Instance
    {
        get
        {
            if (applicationIsQuitting)
            {
                Debug.LogWarning("<color=red>[Singleton] Instance '" + typeof(T)
                    + "' already destroyed on application quit. Won't create again - returning null.</color>");
                return null;
            }

            lock (_lock)
            {
                if (instance == null)
                {
                    instance = (T)FindObjectOfType(typeof(T));

                    if (FindObjectsOfType(typeof(T)).Length > 1)
                    {
                        Debug.LogError("<color=red>[Singleton] Something went really wrong - "
                            + "there should never be more than 1 singleton! Reopenning the scene might fix it.</color>");
                        return instance;
                    }

                    if (instance == null)
                    {
                        GameObject singleton = new GameObject();
                        singleton.name = "[Singleton] " + typeof(T).ToString();
                        instance = singleton.AddComponent<T>();

                        DontDestroyOnLoad(singleton);

                        K_Report.Log("<color=red>[Singleton] An instance of " + typeof(T) + " is needed in the scene, so '"
                            + singleton + "' was created with DontDestroyOnLoad.</color>");
                    }
                    else
                    {
                        K_Report.Log("<color=red>[Singleton] Using instance already created: " + instance.gameObject.name + "</color>");
                    }
                }

                return instance;
            }
        }
    }

    virtual protected void awake() { }
    protected void Awake()
    {
        if (instance == null) instance = this as T;
        else if (instance != this)
        {
            Destroy(this);
            return;
        }

        K_Report.Log("<color=brown>[Awake\t\t] <b>" + instance.name + "</b></color>");
        awake();
    }

    virtual protected void onDestroy() { }
    protected void OnDestroy()
    {
        onDestroy();
        applicationIsQuitting = true;
        K_Report.Log("<color=red>[Destroy\t\t] <b>" + instance.name + "</b></color>");
    }
}

public abstract class MonoSingleton<T> : MonoBehaviour where T : MonoSingleton<T>
{
    static T m_Instance = null;

    public static T Instance
    {
        get
        {
            if (m_Instance != null)
            {
                return m_Instance;
            }

            System.Type type = typeof(T);

            T instance = GameObject.FindObjectOfType(type) as T;

            if (instance == null)
            {
                string typeName = type.ToString();

                GameObject gameObject = new GameObject(typeName, type);
                instance = gameObject.GetComponent<T>();

                if (instance == null)
                {
                    Debug.LogError("Problem during the creation of " + typeName, gameObject);
                }
            }
            else
            {
                Initialize(instance);
            }
            return m_Instance;
        }
    }

    static void Initialize(T instance)
    {
        K_Report.Log("<color=red>[Initialize\t] <b>" + instance.name + "</b></color>");
        if (m_Instance == null)
        {
            m_Instance = instance;

            m_Instance.OnInitialize();
        }
        else if (m_Instance != instance)
        {
            DestroyImmediate(instance.gameObject);
        }
    }
    static void Destroyed(T instance)
    {
        if (m_Instance == instance)
        {
            m_Instance.OnFinalize();

            m_Instance = null;
        }
    }

    public virtual void OnInitialize() { }
    public virtual void OnFinalize() { }

    void Awake()
    {
        this.DLog_Event("Awake");
        Initialize(this as T);
    }

    void OnDestroy()
    {
        K_Report.Log("<color=red>[OnDestroy\t] <b>" + this.name + "</b></color>");
        Destroyed(this as T);
    }

    void OnApplicationQuit()
    {
        Destroyed(this as T);
    }
}